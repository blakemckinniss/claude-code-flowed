{
  "default": [
    {
      "key": "pre_tool/session_20250801_190244/Write_1754089364.224115",
      "value": "{\"key\": \"pre_tool/session_20250801_190244/Write_1754089364.224115\", \"value\": {\"tool\": \"Write\", \"args\": {\"file_path\": \"/home/devcontainers/flowed/.claude/hooks/user_prompt_submit_zen.py\", \"content\": \"#!/usr/bin/env python3\\n\\\"\\\"\\\"ZEN-powered UserPromptSubmit hook handler for Claude Code.\\n\\nThis refactored hook system uses ZEN consultation to generate concise,\\nactionable directives instead of verbose context floods.\\n\\\"\\\"\\\"\\n\\nimport json\\nimport sys\\nimport os\\n\\n# Set up hook paths using centralized path resolver\\nfrom modules.utils.path_resolver import setup_hook_paths\\nsetup_hook_paths()\\n\\nfrom modules.core.zen_consultant import create_zen_consultation_response\\nfrom modules.utils import validate_prompt, log_debug\\n\\n\\ndef main():\\n    \\\"\\\"\\\"Main ZEN-powered hook handler.\\\"\\\"\\\"\\n    try:\\n        # Read input from stdin\\n        input_data = json.load(sys.stdin)\\n    except json.JSONDecodeError as e:\\n        print(f\\\"Error: Invalid JSON input: {e}\\\", file=sys.stderr)\\n        sys.exit(1)\\n    \\n    # Extract and validate prompt\\n    prompt = validate_prompt(input_data.get(\\\"prompt\\\", \\\"\\\"))\\n    log_debug(\\\"ZEN consultation starting\\\", {\\\"prompt_length\\\": len(prompt)})\\n    \\n    # Generate ZEN consultation response\\n    try:\\n        output = create_zen_consultation_response(prompt)\\n        log_debug(\\\"ZEN directive generated\\\", {\\\"directive_length\\\": len(output[\\\"hookSpecificOutput\\\"][\\\"additionalContext\\\"])})\\n    except Exception as e:\\n        log_debug(\\\"ZEN consultation error\\\", {\\\"error\\\": str(e)})\\n        # Fallback to minimal response\\n        output = {\\n            \\\"hookSpecificOutput\\\": {\\n                \\\"hookEventName\\\": \\\"UserPromptSubmit\\\", \\n                \\\"additionalContext\\\": \\\"\\ud83e\\udd16 ZEN DIRECTIVE: SWARM \\u2192 Deploy 1 agent: coder \\u2192 Use MCP: mcp__claude-flow__swarm_init \\u2192 Next: Begin task \\u2192 Warnings: None\\\"\\n            }\\n        }\\n    \\n    # Output the JSON response\\n    print(json.dumps(output))\\n    sys.exit(0)\\n\\n\\nif __name__ == \\\"__main__\\\":\\n    main()\"}, \"timestamp\": \"2025-08-01T19:02:44.224121\", \"session_id\": \"session_20250801_190244\"}, \"category\": \"pre_tool\", \"timestamp\": \"2025-08-01T19:02:44.224124\", \"metadata\": {\"relevance_score\": 0.7, \"categories\": [\"architecture\", \"error\", \"task\", \"pattern\"], \"keywords\": [], \"patterns\": [], \"should_store\": true}, \"semantic_hash\": \"ca474290d5489d3a\"}",
      "namespace": "default",
      "timestamp": 1754089364734
    },
    {
      "key": "post_tool/session_20250801_190244/Write_1754089364.880832",
      "value": "{\"key\": \"post_tool/session_20250801_190244/Write_1754089364.880832\", \"value\": {\"tool\": \"Write\", \"result_summary\": {\"type\": \"dict\", \"length\": 1914, \"preview\": \"{'type': 'create', 'filePath': '/home/devcontainers/flowed/.claude/hooks/user_prompt_submit_zen.py', 'content': '#!/usr/bin/env python3\\\\n\\\"\\\"\\\"ZEN-powered UserPromptSubmit hook handler for Claude Code.\\\\n...\", \"has_error\": true, \"has_warning\": true}, \"execution_time\": -2.384185791015625e-07, \"timestamp\": \"2025-08-01T19:02:44.880854\", \"session_id\": \"session_20250801_190244\", \"success\": false}, \"category\": \"post_tool\", \"timestamp\": \"2025-08-01T19:02:44.880866\", \"metadata\": {\"relevance_score\": 0.2, \"categories\": [\"architecture\", \"task\"], \"keywords\": [], \"patterns\": [], \"should_store\": false}, \"semantic_hash\": \"3c1134ff2ffe013b\"}",
      "namespace": "default",
      "timestamp": 1754089365400
    }
  ]
}