"""Performance patterns analyzer."""

from ..core import Analyzer


class PerformanceAnalyzer(Analyzer):
    """Analyzes performance-related patterns."""
    
    def get_name(self) -> str:
        return "performance"
    
    def _initialize_patterns(self) -> None:
        """Initialize performance patterns."""
        self.add_pattern(
            r"(performance|optimize|bottleneck|slow|speed|fast|efficient)",
            """
âš¡ PERFORMANCE OPTIMIZATION DETECTED
â€¢ Use performance-benchmarker for baseline metrics
â€¢ Deploy perf-analyzer for bottleneck identification
â€¢ Consider adaptive-coordinator for optimization
â€¢ Enable parallel execution strategies""",
            {
                "category": "performance",
                "suggested_agents": ["performance-benchmarker", "perf-analyzer", "adaptive-coordinator"],
                "focus": "optimization"
            }
        )
        
        self.add_pattern(
            r"(memory|leak|usage|consumption|resource)",
            """
ðŸ’¾ MEMORY OPTIMIZATION DETECTED
â€¢ Use memory-coordinator for management
â€¢ Deploy swarm-memory-manager for distribution
â€¢ Consider perf-analyzer for leak detection
â€¢ Monitor with performance-benchmarker""",
            {
                "category": "memory",
                "suggested_agents": ["memory-coordinator", "swarm-memory-manager", "perf-analyzer"],
                "focus": "memory-optimization"
            }
        )
        
        self.add_pattern(
            r"(parallel|concurrent|async|thread|process)",
            """
ðŸ”„ CONCURRENCY OPTIMIZATION DETECTED
â€¢ Deploy mesh-coordinator for parallel execution
â€¢ Use task-orchestrator for workflow optimization
â€¢ Consider adaptive-coordinator for dynamic scaling
â€¢ Enable batchtools for 300% gains""",
            {
                "category": "concurrency",
                "suggested_agents": ["mesh-coordinator", "task-orchestrator", "adaptive-coordinator"],
                "focus": "parallelization"
            }
        )
        
        self.add_pattern(
            r"(scale|scalability|load|stress|benchmark)",
            """
ðŸ“ˆ SCALABILITY ANALYSIS DETECTED
â€¢ Use performance-benchmarker for load testing
â€¢ Deploy hierarchical-coordinator for scaling
â€¢ Consider byzantine-coordinator for resilience
â€¢ Enable distributed consensus protocols""",
            {
                "category": "scalability",
                "suggested_agents": ["performance-benchmarker", "hierarchical-coordinator", "byzantine-coordinator"],
                "focus": "scalability"
            }
        )